<?php

namespace tad\WPBrowser\Generator;


use Codeception\Configuration;
use Codeception\Lib\Di;
use Codeception\Lib\ModuleContainer;
use Codeception\Util\Template;
use phpDocumentor\Reflection\DocBlock\Tags\Generic;
use phpDocumentor\Reflection\DocBlockFactory;

class GherkinSteps
{
    protected $template = <<<EOF
<?php  //[STAMP] {{hash}}
namespace {{namespace}}_generated;

// This class was automatically generated by the steppify task
// You should not change it manually as it will be overwritten on next steppify run
// @codingStandardsIgnoreFile

trait {{name}}GherkinSteps{{postfix}}
{
    {{methods}}
}

EOF;

    protected $methodTemplate = <<<EOF
    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     {{gherkinDoc}}
     *
     * @see \{{module}}::{{method}}()
     */
    public function {{action}}({{params}}) {
        return \$this->getScenario()->runStep(new \Codeception\Step\Action('{{method}}', func_get_args()));
    }
EOF;

    /**
     * @var string
     */
    protected $suite;

    /**
     * @var array
     */
    protected $settings;
    protected $di;
    protected $moduleContainer;
    protected $modules;
    protected $actions;

    public function __construct($suite, array $settings = [])
    {
        $this->settings = $settings;
        $this->suite = $suite;

        $this->di = new Di();
        $this->moduleContainer = new ModuleContainer($this->di, $settings);

        $modules = Configuration::modules($this->settings);
        foreach ($modules as $moduleName) {
            $this->moduleContainer->create($moduleName);
        }

        $this->modules = $this->moduleContainer->all();
        $this->actions = $this->moduleContainer->getActions();
    }

    public function produce()
    {
        $namespace = rtrim($this->settings['namespace'], '\\');

        $methods = $this->getMethods();

        return (new Template($this->template))
            ->place('hash', $this->generateHash())
            ->place('namespace', $namespace ? $namespace . '\\' : '')
            ->place('name', ucfirst($this->suite))
            ->place('postfix', $this->settings['postfix'])
            ->place('methods', $methods)
            ->produce();
    }

    protected function generateHash()
    {
        return (md5(serialize($this->suite) . serialize($this->settings)));
    }

    /**
     * @return string
     * @gherkin given, when, then
     */
    protected function getMethods()
    {
        // generate the method template
        $methods = [];
        $dockBlockFactory = DocBlockFactory::createInstance();

        foreach ($this->actions as $method => $module) {
            $docBlock = (new \ReflectionMethod($module, $method))->getDocComment();

            if (empty($docBlock)) {
                $steps = ['given', 'when', 'then'];
                $gherkinDoc = $this->generateGherkinStepsNotations($steps, $method);
            } else {
                $docBlock = $dockBlockFactory->create($docBlock);
                $gherkinTags = $docBlock->getTagsByName('gherkin');
                /** @var Generic $gherkingTag */
                $gherkingTag = reset($gherkinTags);
                $steps = preg_split('/\\s*,\\s*/', $gherkingTag->getDescription()->render());
                $gherkinDoc = $this->generateGherkinStepsNotations($steps, $method);
            }
            $action = 'step_' . $method;
            $params = '';

            $methods[] = (new Template($this->methodTemplate))
                ->place('module', ltrim($module, '\\'))
                ->place('method', $method)
                ->place('gherkinDoc', $gherkinDoc)
                ->place('action', $action)
                ->place('params', $params)
                ->produce();
        }

        return implode(PHP_EOL, $methods);
    }

    /**
     * @param $steps
     * @param $method
     * @return string
     */
    protected function generateGherkinStepsNotations($steps, $method)
    {
        $lines = [];
        foreach ($steps as $step) {
            $words = array_map('strtolower', preg_split('/(?=[A-Z_])/', $method));
            $lines[] = sprintf('* @%s /I %s/', ucfirst(trim($step)), preg_quote(implode(' ', $words)));
        }
        $doc = implode(PHP_EOL . "\t ", $lines);
        return $doc;
    }
}